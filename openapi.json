{
    "openapi": "3.0.0",
    "info": {
        "title": "Insights Service Approval APIs",
        "description": "APIs to query approval service",
        "version": "1.0.0",
        "contact": {
            "email": "support@redhat.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [
        {
            "name": "Action",
            "description": "Operations about actions"
        },
        {
            "name": "Request",
            "description": "Operations about requests"
        },
        {
            "name": "Stage",
            "description": "Operations about stages"
        },
        {
            "name": "Template",
            "description": "Operations about templates"
        },
        {
            "name": "Workflow",
            "description": "Operations about workflows"
        },
        {
            "name": "Graphql",
            "description": "Operations about GraphQL"
        }
    ],
    "paths": {
        "/graphql": {
            "post": {
                "tags": [
                    "Graphql"
                ],
                "summary": "Perform a GraphQL Query",
                "operationId": "postGraphql",
                "description": "Performs a GraphQL Query",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GraphqlIn"
                            }
                        }
                    },
                    "description": "GraphQL Query Request",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "GraphQL Query Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GraphqlOut"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stages/{stage_id}/actions": {
            "post": {
                "tags": [
                  "Action"
                ],
                "summary": "Add an action to a given stage, available for admin/approver/requester",
                "description": "Add an action to a given stage",
                "operationId": "createAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/stage_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionIn"
                            }
                        }
                    },
                    "description": "Action object that will be added",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "get": {
                "tags": [
                  "Action"
                ],
                "summary": "Return actions in a given stage, available for admin/approver",
                "description": "List all actions of a stage",
                "operationId": "listActionsByStage",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/stage_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/actions/{id}": {
            "get": {
                "tags": [
                  "Action"
                ],
                "summary": "Return an user action by id, available for admin/approver",
                "description": "Return an user action by id",
                "operationId": "showAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/requests": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "Return an array of approval requests, available to anyone",
                "description": "Return an array of requests. The result depends on the x-rh-persona header",
                "operationId": "listRequests",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/persona"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "post": {
                "tags": [
                  "Request"
                ],
                "summary": "Add an approval request by given parameters",
                "description": "Add an approval request by given parameters, available to anyone",
                "operationId": "createRequest",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestIn"
                            }
                        }
                    },
                    "description": "Parameters need to create a request",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/requests/{id}": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "Return an approval request by given id",
                "description": "Return an approval request by given id, available to anyone who can access the request",
                "operationId": "showRequest",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/requests/{request_id}/actions": {
            "post": {
                "tags": [
                  "Action"
                ],
                "summary": "Add an action to current active stage of a given request, available for admin/approver/requester",
                "description": "Add an action to current active stage of a given request. If request is finished, i.e. no current active stage is available, no action can be posted here.",
                "operationId": "createActionByRequest",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/request_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionIn"
                            }
                        }
                    },
                    "description": "Action object that will be added",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/requests/{request_id}/stages": {
            "get": {
                "tags": [
                  "Stage"
                ],
                "summary": "Return an array of stages by given request id, available for admin/requester",
                "description": "Return an array of stages by given request id",
                "operationId": "listStagesByRequest",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/request_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StageOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/stages/{id}": {
            "get": {
                "tags": [
                  "Stage"
                ],
                "summary": "Return an approval stage by given id, available for admin/approver/requester",
                "description": "Return an approval stage by given id",
                "operationId": "showStage",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/StageOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/templates": {
            "get": {
                "tags": [
                  "Template"
                ],
                "summary": "Return all templates, only available for admin",
                "description": "Return all templates",
                "operationId": "listTemplates",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/templates/{id}": {
            "get": {
                "tags": [
                  "Template"
                ],
                "summary": "Return a template by given id, only available for admin",
                "description": "Return a template by given id",
                "operationId": "showTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Return all approval workflows, only available for admin",
                "description": "Return all approval workflows in ascending sequence order",
                "operationId": "listWorkflows",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows/resolve": {
            "post": {
                "tags": [
                    "Workflow"
                ],
                "summary": "Get all workflows linked to a resource object.",
                "description": "Get all workflows linked to a resource object.", 
                "operationId": "resolveWorkflows",
                "requestBody": {
                   "content": {
                       "application/json": {
                           "schema": {
                               "$ref": "#/components/schemas/ResourceObject"
                           }
                       }
                   },
                   "description": "Resource object used to resolve workflows.",
                   "required": true
                },
                "responses": {
                   "200": {
                       "description": "Success",
                       "content": {
                           "application/json": {
                               "schema": {
                                   "type": "array",
                                   "items": {
                                       "$ref": "#/components/schemas/WorkflowOut"
                                   }
                               }
                           }
                       }
                   },
                   "400": {
                       "$ref": "#/components/responses/400BadRequestResponse"
                   },
                   "401": {
                       "$ref": "#/components/responses/401UnauthorizedResponse"
                   },
                   "403": {
                       "$ref": "#/components/responses/403ForbiddenResponse"
                   },
                   "404": {
                       "$ref": "#/components/responses/404NotFoundResponse"
                   },
                   "422": {
                       "$ref": "#/components/responses/422UnprocessableEntityResponse"
                   }
                }
            }
        },
        "/workflows/unlink": {
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Break all links between a resource object and its assigned workflows",
                "operationId": "unlinkAll",
                "description": "Break all links between a resource object and its assigned workflows",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceObject"
                            }
                        }
                    },
                    "description": "Parameters needed to remove a link",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/templates/{template_id}/workflows": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Return an array of workflows by given template id, only available for admin",
                "description": "Return an array of workflows by given template id",
                "operationId": "listWorkflowsByTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/template_id"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    },
                    {
                        "$ref": "#/components/parameters/filter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Add a workflow by given template id, only available for admin",
                "description": "Add a workflow by given template id",
                "operationId": "addWorkflowToTemplate",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/template_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkflowIn"
                            }
                        }
                    },
                    "description": "Parameters need to create workflow",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows/{id}": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Return an approval workflow by given id, only available for admin",
                "description": "Return an approval workflow by given id",
                "operationId": "showWorkflow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "patch": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Update an approval workflow by given id, only available for admin",
                "description": "Update an approval workflow by given id",
                "operationId": "updateWorkflow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkflowIn"
                            }
                        }
                    },
                    "description": "Parameters need to update approval workflow",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "delete": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Delete approval workflow by given id, only available for admin",
                "description": "Delete approval workflow by given id",
                "operationId": "destroyWorkflow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Workflow Deleted"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows/{id}/link": {
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Create a resource link to a given workflow",
                "operationId": "linkWorkflow",
                "description": "Link a resource object to a given workflow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceObject"
                            }
                        }
                    },
                    "description": "Parameters needed to create a link",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows/{id}/unlink": {
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Break the link between a resource object and selected workflow",
                "operationId": "unlinkWorkflow",
                "description": "Break the link between a resource object and selected workflow",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResourceObject"
                            }
                        }
                    },
                    "description": "Parameters needed to remove a link",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        }
    },
    "security": [
        {
            "Basic_auth": []
        }
    ],
    "servers": [
        {
            "url": "https://cloud.redhat.com/{basePath}",
            "description": "Production Server",
            "variables": {
                "basePath": {
                    "default": "/api/approval/v1.0"
                }
            }
        },
        {
            "url": "http://localhost:{port}/{basePath}",
            "description": "Development Server",
            "variables": {
                "port": {
                    "default": "3000"
                },
                "basePath": {
                    "default": "/api/approval/v1.0"
                }
            }
        }
    ],
    "components": {
        "parameters": {
            "id": {
                "name": "id",
                "in": "path",
                "description": "Query by id",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "template_id": {
                "name": "template_id",
                "in": "path",
                "description": "Id of template",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "workflow_id": {
                "name": "workflow_id",
                "in": "path",
                "description": "Id of workflow",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "request_id": {
                "name": "request_id",
                "in": "path",
                "description": "Id of request",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "stage_id": {
                "name": "stage_id",
                "in": "path",
                "description": "Id of stage",
                "required": true,
                "schema": {
                    "type": "string"
                }
            },
            "limit": {
                "name": "limit",
                "in": "query",
                "description": "How many items to return at one time (max 1000)",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 1,
                    "maximum": 1000,
                    "default": 100
                }
            },
            "offset": {
                "name": "offset",
                "in": "query",
                "description": "Starting Offset",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "default": 0
                }
            },
            "filter": {
                "in": "query",
                "name": "filter",
                "description": "Filter for querying collections.",
                "required": false,
                "style": "deepObject",
                "explode": true,
                "schema": {
                    "type": "object"
                }
            },
            "persona": {
                "in": "header",
                "name": "x-rh-persona",
                "description": "Current login user's persona",
                "required": false,
                "schema": {
                    "type": "string",
                    "enum": ["approval/admin", "approval/approver", "approval/requester"]
                }
            }
        },
        "responses": {
            "400BadRequestResponse": {
                "description": "Bad request"
            },
            "401UnauthorizedResponse": {
                "description": "Caller is not authorized to access the resource."
            },
            "403ForbiddenResponse": {
                "description": "Caller is forbidden to perform the action."
            },
            "404NotFoundResponse": {
                "description": "The requested resource is not found."
            },
            "422UnprocessableEntityResponse": {
                "description": "The required paramters are either invalid or missed."
            },
            "DefaultUnexpectedResponse": {
                "description": "An unexpected response."
            }
        },
        "securitySchemes": {
            "Basic_auth": {
                "type": "http",
                "description": "The userid/password is needed when accessing this API externally",
                "scheme": "basic"
            }
        },
        "schemas": {
            "GraphqlIn": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "The GraphQL query",
                        "default": "{}"
                    },
                    "operationName": {
                        "type": "string",
                        "description": "If the Query contains several named operations, the operationName controls which one should be executed",
                        "default": ""
                    },
                    "variables": {
                        "type": "object",
                        "description": "Optional Query variables",
                        "nullable": true
                    }
                },
                "required": [
                    "query"
                ]
            },
            "GraphqlOut": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object",
                        "description": "Results from the GraphQL query"
                    },
                    "errors": {
                        "type": "array",
                        "description": "Errors resulting from the GraphQL query",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            },
            "ActionIn": {
                "type": "object",
                "description": "Input parameters for Action object",
                "required": [
                    "operation"
                ],
                "properties": {
                    "processed_by": {
                        "type": "string",
                        "description": "The person who performs the action"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Types of action, may be one of the value (approve, cancel, deny, notify, memo, or skip). The stage will be updated according to the operation.",
                        "enum": [
                            "approve",
                            "cancel",
                            "deny",
                            "notify",
                            "memo",
                            "skip"
                        ],
                        "default": "memo"
                    },
                    "comments": {
                        "type": "string",
                        "description": "Comments for action",
                        "readOnly": true
                    }
                }
            },
            "ActionOut": {
                "type": "object",
                "required": [
                    "id",
                    "stage_id"
                ],
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of creation"
                    },
                    "stage_id": {
                        "type": "string",
                        "description": "Associated stage id"
                    },
                    "processed_by": {
                        "type": "string",
                        "description": "The person who performs the action"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Types of action, may be one of the value (approve, cancel, deny, notify, memo, or skip). The stage will be updated according to the operation.",
                        "enum": [
                            "approve",
                            "cancel",
                            "deny",
                            "notify",
                            "memo",
                            "skip"
                        ],
                        "default": "memo"
                    },
                    "comments": {
                        "type": "string",
                        "description": "Comments for action",
                        "readOnly": true
                    }
                }
            },
            "ResourceObject": {
                "type": "object",
                "description": "Resource object definition",
                "required": [
                    "object_type",
                    "app_name",
                    "object_id"
                ],
                "properties": {
                    "object_type": {
                        "type": "string",
                        "description": "Object type",
                        "readOnly": true
                    },
                    "app_name": {
                        "type": "string",
                        "description": "Application name the object belongs to",
                        "readOnly": true
                    },
                    "object_id": {
                        "type": "string",
                        "description": "Id of the object",
                        "readOnly": true
                    }
                }
            },
            "RequestIn": {
                "type": "object",
                "description": "Input parameters for approval request object.",
                "required": [
                    "name",
                    "content",
                    "tag_resources"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Request name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Request description"
                    },
                    "content": {
                        "type": "object",
                        "description": "JSON object with request content"
                    },
                    "tag_resources": {
                        "type": "array",
                        "description": "collection of resources having tags that determine the workflows for the request",
                        "items": {
                          "$ref": "#/components/schemas/TagResource"
                        }
                    }
                }
            },
            "TagResource": {
                "description": "Resource with tags",
                "type": "object",
                "required": [
                    "app_name",
                    "object_type",
                    "tags"
                ],
                "properties": {
                    "app_name": {
                        "type": "string"
                    },
                    "object_type": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    }
                }
            },
            "Tag": {
                "description": "tag details",
                "type": "object",
                "required": [
                    "namespace",
                    "name"
                ],
                "properties": {
                    "namespace": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                }
            },
            "Request": {
                "description": "Approval request. It may have child requests. Only a leaf node request can have workflow_id and actions",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of the request. Possible value: canceled, pending, skipped, notified, or finished",
                        "enum": [
                            "canceled",
                            "pending",
                            "skipped",
                            "notified",
                            "finished"
                        ],
                        "readOnly": true
                    },
                    "decision": {
                        "type": "string",
                        "description": "Approval decision. Possible value: undecided, approved, canceled, or denied",
                        "enum": [
                            "undecided",
                            "approved",
                            "canceled",
                            "denied"
                        ],
                        "readOnly": true
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for the decision. Optional. Present normally when the decision is denied",
                        "readOnly": true
                    },
                    "workflow_id": {
                        "type": "string",
                        "description": "Associate workflow id. Available only if the request is a leaf node",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of creation",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp of last update",
                        "readOnly": true
                    },
                    "number_of_children": {
                        "type": "integer",
                        "description": "Number of child requests",
                        "readOnly": true
                    },
                    "number_of_finished_children": {
                        "type": "integer",
                        "description": "Number of finished child requests",
                        "readOnly": true
                    },
                    "owner": {
                        "type": "string",
                        "description": "Requester's id",
                        "readOnly": true
                    },
                    "requester_name": {
                        "type": "string",
                        "description": "Requester's full name",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Request name",
                        "readOnly": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Request description",
                        "readOnly": true
                    }
                }
            },
            "StageOut": {
                "type": "object",
                "description": "A stage of an approval request.",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the group that processes the stage"
                    },
                    "group_ref": {
                        "type": "string",
                        "description": "Associated group reference id"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of stage or request. It may be one of values (canceled, pending, skipped, notified or finished)",
                        "enum": [
                            "canceled",
                            "pending",
                            "skipped",
                            "notified",
                            "finished"
                        ],
                        "default": "pending"
                    },
                    "decision": {
                        "type": "string",
                        "description": "Final decision, may be one of the value (undecided, approved, canceled or denied)",
                        "enum": [
                            "undecided",
                            "approved",
                            "canceled",
                            "denied"
                        ],
                        "default": "undecided"
                    },
                    "notified_at": {
                        "type": "string",
                        "description": "the time approvers in the stage are notified"
                    }
                }
            },
            "TemplateOut": {
                "type": "object",
                "description": "The template to categorize workflows.",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "WorkflowIn": {
                "type": "object",
                "required": [
                    "name",
                    "group_refs"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                         "description": "an indicator of the execution order for selected workflows"
                    },
                    "group_refs": {
                        "type": "array",
                        "description": "Group reference ids associated with workflow",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "WorkflowOut": {
                "description": "The workflow to process approval requests. Each workflow is linked to multiple groups of approvals.",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "template_id": {
                        "type": "string",
                        "description": "Associated template id"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "sequence": {
                        "type": "integer",
                        "description": "an indicator of the execution order for selected workflows"
                    },
                    "group_refs": {
                        "type": "array",
                        "description": "Group reference ids associated with workflow",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "ActionOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ActionOut"
                        }
                    }
                }
            },
            "RequestCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Request"
                        }
                    }
                }
            },
            "StageOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/StageOut"
                        }
                    }
                }
            },
            "TemplateOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TemplateOut"
                        }
                    }
                }
            },
            "WorkflowOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/WorkflowOut"
                        }
                    }
                }
            },
            "CollectionLinks": {
                "type": "object",
                "properties": {
                    "first": {
                        "type": "string",
                        "title": "First Link",
                        "description": "The link to fetch the first group of items in the result set"
                    },
                    "last": {
                        "type": "string",
                        "title": "Last Link",
                        "description": "The link to fetch the last group of items in the result set"
                    },
                    "prev": {
                        "type": "string",
                        "title": "Previous Link",
                        "description": "The link to fetch the previous group of items in the result set"
                    },
                    "next": {
                        "type": "string",
                        "title": "Next Link",
                        "description": "The link to fetch the next group of items in the result set"
                    }
                }
            },
            "CollectionMetadata": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "title": "Total number of items in the result set",
                        "description": "This is the total number of items in the result set, of which only a subset is returned defined by the QueryLimit parameter"
                    },
                    "limit": {
                        "type": "integer",
                        "title": "The number of items in each page",
                        "description": "This is the number of items each page can display"
                    },
                    "offset": {
                        "type": "integer",
                        "title": "Offset from beginning of the result set",
                        "description": "This is the offset from beginning of the result set"
                    }
                }
            }
        }
    }
}
